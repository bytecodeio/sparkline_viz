!function(n,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.voronoimap=t():n.voronoimap=t()}(window,function(){return d={"./node_modules/@fnando/sparkline/dist/sparkline.commonjs2.js":
/*!********************************************************************!*\
  !*** ./node_modules/@fnando/sparkline/dist/sparkline.commonjs2.js ***!
  \********************************************************************/
/*! no static exports found */function(module,exports){eval('module.exports=function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=1)}([function(t,e,r){var n=r(2),o=r(3),i=r(4);t.exports=function(t){return n(t)||o(t)||i()}},function(t,e,r){"use strict";r.r(e),r.d(e,"sparkline",function(){return c});var n=r(0),o=r.n(n);function i(t,e,r,n){return parseFloat((e-n*e/t+r).toFixed(2))}function a(t){return t.value}function u(t,e){var r=document.createElementNS("http://www.w3.org/2000/svg",t);for(var n in e)r.setAttribute(n,e[n]);return r}function c(t,e,r){var n;if(n=t,o()(n.querySelectorAll("*")).forEach(function(t){return n.removeChild(t)}),!(e.length<=1)){r=r||{},"number"==typeof e[0]&&(e=e.map(function(t){return{value:t}}));var c=r.onmousemove,l=r.onmouseout,s="interactive"in r?r.interactive:!!c,f=r.spotRadius||2,p=2*f,d=r.cursorWidth||2,v=parseFloat(t.attributes["stroke-width"].value),b=r.fetch||a,h=e.map(function(t){return b(t)}),y=parseFloat(t.attributes.width.value)-2*p,x=parseFloat(t.attributes.height.value),m=x-2*v-p,g=Math.max.apply(Math,o()(h)),A=-1e3,w=h.length-1,j=y/w,O=[],k=i(g,m,v+f,h[0]),S="M".concat(p," ").concat(k);h.forEach(function(t,r){var n=r*j+p,o=i(g,m,v+f,t);O.push(Object.assign({},e[r],{index:r,x:n,y:o})),S+=" L ".concat(n," ").concat(o)});var M=u("path",{class:"sparkline--line",d:S,fill:"none"}),C=u("path",{class:"sparkline--fill",d:"".concat(S," V ").concat(x," L ").concat(p," ").concat(x," Z"),stroke:"none"});if(t.appendChild(C),t.appendChild(M),s){var E=u("line",{class:"sparkline--cursor",x1:A,x2:A,y1:0,y2:x,"stroke-width":d}),_=u("circle",{class:"sparkline--spot",cx:A,cy:A,r:f});t.appendChild(E),t.appendChild(_);var F=u("rect",{width:t.attributes.width.value,height:t.attributes.height.value,style:"fill: transparent; stroke: transparent",class:"sparkline--interaction-layer"});t.appendChild(F),F.addEventListener("mouseout",function(t){E.setAttribute("x1",A),E.setAttribute("x2",A),_.setAttribute("cx",A),l&&l(t)}),F.addEventListener("mousemove",function(t){var e=t.offsetX,r=O.find(function(t){return t.x>=e});r||(r=O[w]);var n,o=O[O.indexOf(r)-1],i=(n=o?o.x+(r.x-o.x)/2<=e?r:o:r).x,a=n.y;_.setAttribute("cx",i),_.setAttribute("cy",a),E.setAttribute("x1",i),E.setAttribute("x2",i),c&&c(t,n)})}}}e.default=c},function(t,e){t.exports=function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}},function(t,e){t.exports=function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}},function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}}]);\n//# sourceMappingURL=sparkline.commonjs2.js.map\n\n//# sourceURL=webpack://%5Bname%5D/./node_modules/@fnando/sparkline/dist/sparkline.commonjs2.js?')},"./src/visualizations/voronoimap.ts":
/*!******************************************!*\
  !*** ./src/visualizations/voronoimap.ts ***!
  \******************************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", { value: true });\nconst sparkline_1 = __importDefault(__webpack_require__(/*! @fnando/sparkline */ "./node_modules/@fnando/sparkline/dist/sparkline.commonjs2.js"));\nconst vis = {\n    id: \'sparkline\',\n    label: \'sparkline\',\n    options: {\n        landColor: {\n            type: \'string\',\n            section: \'Style\',\n            default: \'#aaaaaa\',\n            label: \'Land Color\',\n            display: \'color\'\n        },\n        pointColor: {\n            type: \'string\',\n            section: \'Style\',\n            default: \'#000000\',\n            label: \'Point Color\',\n            display: \'color\'\n        },\n        pointRadius: {\n            min: 1,\n            max: 20,\n            step: 1,\n            default: 3,\n            type: \'number\',\n            section: \'Style\',\n            label: \'Point Radius\',\n            display: \'range\',\n        },\n        lineColor: {\n            type: \'string\',\n            section: \'Style\',\n            default: \'#FF0000\',\n            label: \'Line Color\',\n            display: \'color\'\n        },\n        zoomLevel: {\n            default: 0,\n            min: 0,\n            step: 1,\n            max: 20,\n            type: \'number\',\n            section: \'Style\',\n            label: \'Zoom Level\',\n            display: \'range\'\n        }\n    },\n    // Set up the initial state of the visualization\n    create: function (element, config) {\n        var container = element.appendChild(document.createElement("div"));\n        container.className = "sparkline";\n        this._textElement = container.appendChild(document.createElement("div"));\n        // this.svg = d3.select(element).append(\'svg\');\n        // d3.select(element).append("button")\n        //     .attr("class","zoomIn")\n        //     .html("Zoom In");\n        // d3.select(element).append("button")\n        //     .attr("class","zoomOut")\n        //     .html("Zoom Out");\n        // d3.select(element).append("button")\n        //     .attr("class","panUp")\n        //     .html("^");\n        // if (typeof config.landColor != \'string\') {\n        //     config.landColor = this.options.landColor.default;\n        // }\n        // if (typeof config.pointColor != \'string\') {\n        //     config.pointColor = this.options.pointColor.default;\n        // }\n        // if (typeof config.pointRadius != \'number\' || config.pointRadius == this.options.pointRadius.max) {\n        //     config.pointRadius = this.options.pointRadius.default;\n        // }\n        // if (typeof config.lineColor != \'string\') {\n        //     config.lineColor = this.options.lineColor.default;\n        // }\n        // if (typeof config.zoomLevel != \'number\' || config.zoomLevel == this.options.zoomLevel.max) {\n        //     config.zoomLevel = this.options.zoomLevel.default;\n        // }\n    },\n    // Render in response to the data or settings changing\n    updateAsync: function (data, element, config, queryResponse, details, done) {\n        sparkline_1.default(document.getElementById("sparkline"), [1, 5, 2, 4, 8, 3, 7]);\n        done();\n        // const width = element.clientWidth, height = element.clientHeight,prefix = prefixMatch(["webkit", "ms", "Moz", "O"]);\n        // const dimensions = queryResponse.fields.dimension_like;\n        // const us = require(\'./us_geo.json\');\n        // const projection = centerZoom(us);\n        // if (typeof config.landColor != \'string\') {\n        //     config.landColor = this.options.landColor.default;\n        // }\n        // if (typeof config.pointColor != \'string\') {\n        //     config.pointColor = this.options.pointColor.default;\n        // }\n        // if (typeof config.pointRadius != \'number\' || config.pointRadius == this.options.pointRadius.max) {\n        //     config.pointRadius = this.options.pointRadius.default;\n        // }\n        // if (typeof config.lineColor != \'string\') {\n        //     config.lineColor = this.options.lineColor.default;\n        // }\n        // if (typeof config.zoomLevel != \'number\' || config.zoomLevel == this.options.zoomLevel.max) {\n        //     config.zoomLevel = this.options.zoomLevel.default;\n        // }\n        // let i = 0;\n        // data.forEach((row: Row) => {\n        //     row.taxonomy = {\n        //         value: dimensions.map((dimension) => swapPosition(row[dimension.name].value)),\n        //         arcs:[],\n        //         id: \'lk_line_group_\'+i.toString(),\n        //     };\n        //     if (i <= 5) {\n        //         row.taxonomy.arcs = [\n        //             [-131.402667959,55.549851298],\n        //         ];\n        //     }\n        //     i++;\n        // });\n        // this.svg = d3.select(element)\n        //     .select("svg");\n        // this.svg.remove();\n        // d3.select(element).selectAll(".zoomIn")\n        //     .on("click",function() { clicked("zoomIn")});\n        // d3.select(element).selectAll(".zoomOut")\n        //     .on("click",function() {clicked("zoomOut")});\n        // d3.select(element).selectAll(".panUp")\n        //     .on("click",function() {clicked("panUp")});\n        // let tile = geoTile()\n        //     .size([width, height]);\n        // let initialTransform = d3.zoomIdentity\n        //     .translate(0,0)\n        //     .scale(1);\n        // let svg = d3.select(element)\n        //     .append("svg")\n        //     .attr("height",height)\n        //     .attr("width",width);\n        // let raster = svg.append("g");\n        // let zoom = d3.zoom()\n        //     .on("zoom", function() {zoomed();});\n        // svg.call(zoom.transform, initialTransform);\n        // function zoomed() {\n        //     console.log(\'zoomed\');\n        //     let transform = d3.event.transform;\n        //     d3.select("#mapLayer").attr("transform",transform);\n        //     d3.select("#pointsLayer").attr("transform",transform);\n        //     // g.style("stroke-width", 1.5 / transform.k + "px");\n        //     // g.attr("transform", transform);\n        //     let tiles = tile\n        //         .scale(transform.k)\n        //         .translate([transform.x,transform.y])\n        //         ();\n        //     projection\n        //         .scale(transform.k / (2 * Math.PI))\n        //         .translate(transform.x, transform.y);\n        //     let image = raster\n        //         .attr("transform", stringify(tiles.scale, tiles.translate))\n        //         .selectAll("image")\n        //         .data(tiles, function(d) { return d; });\n        //     image.exit().remove();\n        //     image.enter().append("image")\n        //         // .attr("xlink:href", function(d) { return "http://" + ["a", "b", "c"][Math.random() * 3 | 0] + ".tile.openstreetmap.org/" + d[2] + "/" + d[0] + "/" + d[1] + ".png"; })\n        //         .attr("xlink:href", function(d) { return "http://" + ["a", "b", "c"][Math.random() * 3 | 0] + ".tile.openstreetmap.org/" + (config.zoomLevel+4) + "/" + (d[0]+2) + "/" + d[1] + ".png"; })\n        //         .attr("x", function(d) { return d[0] * 256; })\n        //         .attr("y", function(d) { return d[1] * 256; })\n        //         .attr("width", 256)\n        //         .attr("height", 256);\n        // }\n        // // This function "centers" and "zooms" a map by setting its projection\'s scale and translate according to its outer boundary\n        // function centerZoom(data){\n        //     // create a first guess for the projection\n        //     var scale  = 1;\n        //     var offset = [width / 2, height / 2];\n        //     var projection = d3.geoAlbersUsa().scale(scale).translate(offset);\n        //     // get bounds\n        //     var bounds = d3.geoPath().projection(projection).bounds(data);\n        //     // calculate the scale and offset\n        //     var hscale  = scale * width  / (bounds[1][0] - bounds[0][0]);\n        //     var vscale  = scale * height / (bounds[1][1] - bounds[0][1]);\n        //     var scale   = (hscale < vscale) ? hscale : vscale;\n        //     var offset  = [width - (bounds[0][0] + bounds[1][0]) / 2, height - (bounds[0][1] + bounds[1][1]) / 2];\n        //     // new projection\n        //     projection = d3.geoAlbersUsa()\n        //         .scale(scale)\n        //         .translate(offset);\n        //     return projection;\n        // }\n        // function clicked(d) {\n        //     let translateX = d3.select(element).select("svg").attr(\'width\'),\n        //         translateY = d3.select(element).select("svg").attr(\'height\');\n        //     if (d == \'zoomIn\') {\n        //         config.zoomLevel++;\n        //     }\n        //     if (d == \'zoomOut\') {\n        //         config.zoomLevel--;\n        //     }\n        //     translateX = ((translateX / 2) * config.zoomLevel) * -1;\n        //     translateY = ((translateY / 2) * config.zoomLevel) * -1;\n        //     if (d == \'panUp\') {\n        //         translateY = translateY - ((translateY / 2) * config.zoomLevel);\n        //     }\n        //     let transform = d3.zoomIdentity\n        //         .translate( translateX, translateY)\n        //         .scale(config.zoomLevel+1);\n        //     svg.transition()\n        //         .duration(750)\n        //         .call(zoom.transform, transform);\n        // }\n        // this.svg = d3.select(element).select("svg");\n        // d3.select(element).select("svg").append("g")\n        //     .attr("id","mapLayer");\n        // d3.select(element).select("svg").append("g")\n        //     .attr("id","pointsLayer");\n        // const path = d3.geoPath()\n        //     .projection(projection)\n        //     .pointRadius(5);\n        // d3.select("#mapLayer").selectAll("path")\n        //     .data(us.features)\n        //     .attr("class", "nation")\n        //     .enter()\n        //     .append("path")\n        //     .attr("fill",(config.landColor || \'#AAAAAA\'))\n        //     .attr("d",path);\n        // d3.select("#pointsLayer").selectAll("circle")\n        //     .data(data)\n        //     .enter()\n        //     .append("circle")\n        //     .attr("class","points")\n        //     .attr("cx", function (d) {\n        //         return projection(d.taxonomy.value[0])[0];\n        //     })\n        //     .attr("cy", function (d) {\n        //         return projection(d.taxonomy.value[0])[1];\n        //     })\n        //     .attr("r", function (d) {\n        //         return (config.pointRadius || 2);\n        //     })\n        //     .attr("fill", (config.pointColor || "#000000"))\n        //     .attr("onmouseover",function(d) {\n        //         return "document.querySelectorAll(\\"line[line_group=\'lk_line_group_0\']\\").forEach(function(l){l.setAttribute(\\\'style\\\',\\\'\\\')})";\n        //     })\n        //     .attr("onmouseout",function(d) {\n        //         return "document.querySelectorAll(\\"line[line_group=\'lk_line_group_0\']\\").forEach(function(l){l.setAttribute(\\\'style\\\',\\\'display:none\\\')})";\n        //     });\n        // d3.select("#pointsLayer").selectAll("line")\n        //     .data(data)\n        //     .enter()\n        //     .append("line")\n        //     .attr("line_group",function(d) {\n        //         return "lk_line_group_0";\n        //     })\n        //     .attr("x1", function(d) {\n        //         if (d.taxonomy.arcs.length !== 0) {\n        //             if (projection(d.taxonomy.arcs[0]) !== null) {\n        //                 return projection(d.taxonomy.value[0])[0];\n        //             }\n        //         }\n        //         return null;\n        //     })\n        //     .attr("y1", function(d) {\n        //         if (d.taxonomy.arcs.length !== 0) {\n        //             if (projection(d.taxonomy.arcs[0]) !== null) {\n        //                 return projection(d.taxonomy.value[0])[1];\n        //             }\n        //         }\n        //         return null;\n        //     })\n        //     .attr("x2", function(d) {\n        //         if (d.taxonomy.arcs.length !== 0) {\n        //             if (projection(d.taxonomy.arcs[0]) !== null) {\n        //                 return projection(d.taxonomy.arcs[0])[0];\n        //             }\n        //         }\n        //         return null;\n        //     })\n        //     .attr("y2", function(d) {\n        //         if (d.taxonomy.arcs.length !== 0) {\n        //             if (projection(d.taxonomy.arcs[0]) !== null) {\n        //                 return projection(d.taxonomy.arcs[0])[1];\n        //             }\n        //         }\n        //         return null;\n        //     })\n        //     .attr("stroke",config.lineColor)\n        //     .attr("style","display:none");\n    }\n};\nfunction swapPosition(location) {\n    return [location[1], location[0]];\n}\nfunction matrix3d(scale, translate) {\n    let k = scale / 256, r = scale % 1 ? Number : Math.round;\n    return "matrix3d(" + [k, 0, 0, 0, 0, k, 0, 0, 0, 0, k, 0, r(translate[0] * scale), r(translate[1] * scale), 0, 1] + ")";\n}\nfunction stringify(scale, translate) {\n    let k = scale / 256, r = scale % 1 ? Number : Math.round;\n    return "translate(" + r(translate[0] * scale) + "," + r(translate[1] * scale) + ") scale(" + k + ")";\n}\nfunction prefixMatch(p) {\n    let i = -1, n = p.length, s = document.body.style;\n    while (++i < n)\n        if (p[i] + "Transform" in s)\n            return "-" + p[i].toLowerCase() + "-";\n    return "";\n}\nlooker.plugins.visualizations.add(vis);\n\n\n//# sourceURL=webpack://%5Bname%5D/./src/visualizations/voronoimap.ts?')}},e={},f.m=d,f.c=e,f.d=function(n,t,e){f.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:e})},f.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},f.t=function(t,n){if(1&n&&(t=f(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(f.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)f.d(e,o,function(n){return t[n]}.bind(null,o));return e},f.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return f.d(t,"a",t),t},f.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},f.p="",f(f.s="./src/visualizations/voronoimap.ts");function f(n){if(e[n])return e[n].exports;var t=e[n]={i:n,l:!1,exports:{}};return d[n].call(t.exports,t,t.exports,f),t.l=!0,t.exports}var d,e});